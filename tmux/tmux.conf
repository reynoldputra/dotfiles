####################################
## vim: ft=tmux
##  _______________________________
## /\                              \
## \_|    __                       |
##   |   / /_____ ___  __  ___  __ |
##   |  / __/ __ `__ \/ / / / |/_/ |
##   | / /_/ / / / / / /_/ />  <   |
##   | \__/_/ /_/ /_/\__,_/_/|_|   |
##   |                 -by m42nk   |
##   |   __________________________|_
##    \_/____________________________/
##
#####################################

#####################################
## General setup
#####################################

## Variables
_cfg_dir="~/.config/tmux"
_cfg_main="${_cfg_dir}/tmux.conf"
_cfg_custom="${_cfg_dir}/custom"
_cfg_scripts="${_cfg_dir}/scripts"
_cfg_default="${_cfg_custom}/default.conf"

## Detect if current pane is running vim programs (vim,nvim,vimdiff, etc)
_is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

## Prefix
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# My old prefix, muscle memory :( 
# (but keep seend C-a in case I actually need to use it)
# TODO: keep display-message shown even if pressing other key
# bind -T root C-a display-message "WRONG PREFIX" ';' send-keys C-a

## Enable mouse
set -g mouse on

## Enable 256 color support
if-shell -b '[ $(uname -s) = Linux ]' {
  set -g default-terminal "tmux-256color"
}

## NOTE: If you're using tmux on macOS and tmux seems to be broken,
## comment out the line below
set -g default-terminal "tmux-256color"

## Enable extended keys (ctrl+enter, shift+enter, etc)
set -s extended-keys on

set -as terminal-features ",*:RGB"
set -as terminal-features ',*:Smulx=\E[4::%p1%dm'
set -as terminal-features ",*:extkeys"

## Reload config
## NOTE:
## Config is auto-reloaded if edited using vim
## see: autocommands in https://github.com/m42nk/dotfiles-nvim
bind r run-shell "\
tmux source '$_cfg_default' '$_cfg_main' 2>&1 && \
tmux display-message 'Config reloaded!' \
"

#####################################
## Options
#####################################

## Server options
set -s  focus-events on  # Enable focus-events inside tmux
set -sg escape-time  0   # Reduce delay when pressing <Esc>
set -sg repeat-time  500 # How long tmux wait for repeatable (-r) bind-key

# if-shell -b 'command -v xsel' {
  # set -g set-clipboard on
  # set -s copy-command "xsel -i"
  # set -s copy-command "xsel -sel clip" # System clipboard command (default is often fine)
# }

if-shell -b 'command -v xclip' {
  set -g set-clipboard on
  # set -s copy-command "xsel -i"
  set -s copy-command "xclip -se c -i" # System clipboard command (default is often fine)
}

set  -g set-titles-string "#S:#I:#W - tmux #{session_alerts}"
setw -g pane-base-index 1                                       # Start pane numbering at 1
set  -g detach-on-destroy off                                   # Don't exit tmux when pane/window is closed
set  -g history-limit 100000                                    # Increase scrollback buffer size
set  -g set-titles on                                           # Allow tmux to change terminal title
set  -g base-index 1                                            # Start windows numbering at 1
set  -g popup-border-lines 'rounded'                            # Make popup window border rounded
set  -g wrap-search on                                          # Search wrap around
set  -g scroll-on-clear on                                      # Scroll to bottom on clear
set  -g renumber-windows on                                     # Renumber windows when a window is closed

# set -g pane-border-status top # setting this here will make every new window has pane border, use from keybind instead
set -g pane-border-lines single
set -g pane-border-indicators arrows
set -g pane-border-format "[#{pane_title}]"

## Vim movement in Copy mode
setw -g mode-keys vi
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel

#####################################
## Status line
#####################################

source-file "${_cfg_dir}/status.tmux.conf"

#####################################
## Command Alias
#####################################

set -s command-alias[10] rename-pane='select-pane -T'

#####################################
## Keybinding
## Notes:
## -r = keybinding is repeatable (can be pressed multiple time without prefix)
#####################################


## Command prompt
bind \: command-prompt

## Vim-aware movement
## NOTE:
## vim should also be configured to be tmux-aware
## eg: https://github.com/christoomey/vim-tmux-navigator
bind h if-shell "$_is_vim" "send-keys C-w h" "select-pane -L"
bind j if-shell "$_is_vim" "send-keys C-w j" "select-pane -D"
bind k if-shell "$_is_vim" "send-keys C-w k" "select-pane -U"
bind l if-shell "$_is_vim" "send-keys C-w l" "select-pane -R"

## Window navigation
bind -r C-p   previous-window # Go to previous window
bind -r C-n   next-window     # Go to next window

bind -r M-h   previous-window # Go to previous window (with alt)
bind -r M-l   next-window     # Go to next window (with alt)

# Swap window by index
bind -r C-S-p swap-window -d -t -1
bind -r C-S-n swap-window -d -t +1

## Find session
bind C-f command-prompt -p "match-window: " 'find-window -t %%'

## Window rotation
bind -r o rotate-window # Rotate panes inside window (counter clockwise)
bind -r Tab last-window # move to last active window

## Window layout
bind -r Space next-layout   # Cycle window layout
bind -r C-Space next-layout # Cycle window layout

## Swap pane by index
bind -r J swap-pane -D
bind -r K swap-pane -U
# bind -r C-h swap-pane -L
# bind -r C-l swap-pane -R

## Creation
bind n new-session                             # Create new session
bind c new-window -a -c "#{pane_current_path}" # Create new window, next to current
bind C new-window -c "#{pane_current_path}"    # Create new window, at the end

## Split window
bind '\' if -F "#{window_zoomed_flag}" 'select-pane -l' 'split-window -h -c "#{pane_current_path}"'  # Backslash split vertical (`|` without shift)
bind -   if -F "#{window_zoomed_flag}" 'select-pane -l' 'split-window -v -c "#{pane_current_path}"'  # Minus split horizontal

## Pane join & breaking
bind C-S-j choose-tree 'join-pane -t "%%"'            # Choose pane from tree and join them to current
bind !   break-pane ';' display-message "Pane moved!" # Break pane to a new window, then focus to it

## Zoom
bind Enter resize-pane -Z

## Rename
bind , command-prompt -I "#{window_name}" -p 'rename-window:' 'rename-window "%%"'
bind . command-prompt -I "#{session_name}" -p 'rename-session:' 'rename-session "%%"'
bind > command-prompt -I "#{pane_title}" -p  'rename-pane:' 'rename-pane "%%"'
bind B command-prompt -I "#{pane_title}" -p  'rename-pane:' 'rename-pane "%%"'

## Fuzzy chooser
bind i display-popup -E -h '80%' -w '80%' "${_cfg_scripts}/fuzzy-chooser.sh"

## Scratch
bind q run ${_cfg_dir}/scripts/popup-window.sh
bind Q run "${_cfg_dir}/scripts/popup-window.sh #{pane_current_path}"

## Pane Border
bind b set pane-border-status

#####################################
## Key menu
#####################################

# ## Renames
# bind , display-menu -x 0 -y S \
#   -T "Rename" \
#   "Window"  w "command-prompt -p 'new-name:' 'rename-window -t #{window_id} %%'" \
#   "Session" s "command-prompt -p 'new-name:' 'rename-session -t #{session_id} %%'"

## Delete/Detach/Kill
bind d display-menu -x 0 -y S \
  -T "Delete/Detach/Kill" \
  "Window"       w "kill-window -t #{window_id}" \
  "Session"      s "kill-session -t #{session_id}" \
  "Pane"         p "kill-pane -t #{pane_id}" \
  "Pane (quick)" d "kill-pane -t #{pane_id}" \
  "Client"       q "confirm-before -p 'Quit tmux in this terminal?' 'detach-client'" \
  "Server"       S "confirm-before -p 'Kill tmux server?' 'kill-server'" \
  "" \
  "Other window except current" W "kill-window -t #{window_id} -a" \
  "Other pane except current"   P "kill-pane -t #{pane_id} -a" \
  "Detached session"            D "run 'tmux list-sessions | grep -v attached | cut -d: -f1 |  xargs -t -n1 tmux kill-session -t'"

#####################################
## Keybind chording with key-table
#####################################

## Resize 
bind R switch-client -T resize
bind -T resize -r h resize-pane -L  1 ';' switch-client -T resize
bind -T resize -r j resize-pane -D  1 ';' switch-client -T resize
bind -T resize -r k resize-pane -U  1 ';' switch-client -T resize
bind -T resize -r l resize-pane -R  1 ';' switch-client -T resize
bind -T resize -r H resize-pane -L 10 ';' switch-client -T resize
bind -T resize -r J resize-pane -D 10 ';' switch-client -T resize
bind -T resize -r K resize-pane -U 10 ';' switch-client -T resize
bind -T resize -r L resize-pane -R 10 ';' switch-client -T resize

# ## Pane navigation
bind w switch-client -T swaping-window
bind -T swaping-window p swap-window -d -t -1 ';' switch-client -T swaping-window
bind -T swaping-window n swap-window -d -t +1 ';' switch-client -T swaping-window
bind -T swaping-window h swap-window -d -t -1 ';' switch-client -T swaping-window
bind -T swaping-window l swap-window -d -t +1 ';' switch-client -T swaping-window
# bind -T swap-window -r h swap-window -s +0 -t -1 ';' select-window -t -1
# bind -T swap-window -r l swap-window -s +0 -t +1 ';' select-window -t +1

#####################################
## Hooks
#####################################

## Renumber session 
## Session name will be "$number_of_session + 1"
set-hook -g session-created "run ${_cfg_dir}/scripts/hook-renumber-sessions.sh"
set-hook -g session-closed  "run ${_cfg_dir}/scripts/hook-renumber-sessions.sh"

set-hook -g after-split-window "select-pane -T 'Pane'"
set-hook -g after-new-window "select-pane -T 'Pane'"
set-hook -g after-new-session "select-pane -T 'Pane'"

#####################################
## Personal
#####################################

source-file "${_cfg_custom}/personal.conf"

## TODO:
## - show pane dir on window title
## - keybind: move tmux pane like vim pane (c-w L -> move to left)
